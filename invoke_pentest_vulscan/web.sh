#!/bin/bash

# Script's directory
SCRIPT_DIR=$(dirname "$0")

# Default scans to run using regex
SCANS_TO_RUN=".*"

# Which specific top ports to scan by default
TCP_PORTS_TO_SCAN="1000"

# HTTP Paths
DEFAULT_HTTP_PATH=""

USAGE="
[-] $0  <hostname> [http_path=$DEFAULT_HTTP_PATH] [tcp_ports=$TCP_PORTS_TO_SCAN]
"

if [ $# -lt 1 ]; then
    echo "$USAGE"
    exit 1
fi

hostname="$1"
http_path=${2:-"$DEFAULT_HTTP_PATH"}
tcp_ports=${3:-"$TCP_PORTS_TO_SCAN"}

# Get current working directory
cwd=$(pwd)

outfolder="$SCRIPT_DIR/out-pentest-vulscan-$hostname"
echo "[*] Creating outfolder: $outfolder for storing results if it doesn't exist..."
[ ! -d "$outfolder" ] && mkdir "$outfolder"

echo "[*] Running TCP scan for host: $hostname..."
nmap -sS -sV -Pn --top-ports="$tcp_ports" -v --stats-every=5s "$hostname" -oN "$outfolder/out-common-port-tcp-scan-nmap.txt" \
    -oX "$outfolder/out-common-port-tcp-scan-nmap.xml" -oG "$outfolder/out-common-port-tcp-scan-nmap.grep"

echo "[*] Running UDP scan for host: $hostname on top 20 ports..."
nmap -sU -Pn --top-ports=20 -v --stats-every=5s "$hostname" -oN "$outfolder/out-common-port-udp-scan-nmap.txt" \
    -oG "$outfolder/out-common-port-udp-scan-nmap.grep" -oX "$outfolder/out-common-port-udp-scan-nmap.xml"

http_ports=$(cat "$outfolder/out-common-port-tcp-scan-nmap.txt" \
    | grep -iE "/tcp.*open" \
    | tr -s "  " " " \
    | grep -iE "http[^s]" \
    | cut -d"/" -f1)
https_ports=$(cat "$outfolder/out-common-port-tcp-scan-nmap.txt" \
    | grep -iE "/tcp.*open" \
    | tr -s "  " " " \
    | grep -iE "https" \
    | cut -d"/" -f1)
http_https_ports=$(cat "$outfolder/out-common-port-tcp-scan-nmap.txt" \
    | grep -iE "/tcp.*open" \
    | tr -s "  " " " \
    | grep -iE "http" \
    | cut -d"/" -f1)

smb_ports=$(cat "$outfolder/out-common-port-tcp-scan-nmap.txt" \
    | grep -iE "/tcp.*open" \
    | tr -s "  " " " \
    | grep -iE "msrpc|smb|netbios|microsoft\-ds" \
    | cut -d"/" -f1)


function scan_http_service {
    local protocol="$1"
    local hostname="$2"
    local port="$3"
    local http_path="$4"

    echo "[*] Check if the site is a S3 bucket via awscli s3..."
    aws s3 ls s3://$hostname

    echo "[*] Running nuclei scan using my nuclei templates on $protocol://$hostname:$port$http_path..."
    nuclei -u $protocol://$hostname:$port$http_path -t "/opt/mycode_public/nuclei-templates/my-templates/" 

    echo "[*] Scan for Orion Solarwinds console..."
    httpx -fr -random-agent -u "$protocol://$hostname:$port$http_path/Orion/Login.aspx" -mr "(?s)/orion/images/SolarWinds.Logo|/orion/apm/apmevents|/orion/styles/orionminreqs" 2>/dev/null
    # Known to be vulnerable to CVE-2023-33225 
    #   About: Incorrect Comparision Vulnerability / Requires authenticated access
    #   More info: https://www.solarwinds.com/trust-center/security-advisories/cve-2023-33225
    #   POC: TBC

    echo "[*] Scan for Metabase Open-source page via httpx..."
    httpx -fr -random-agent -u $protocol://$hostname:$port$http_path -mc 200 -mr "(?s)window.MetabaseBootstrap.*window.MetabaseLocalization.*window.MetabaseRoot" 2>/dev/null
    # Known to be vulnerable to CVE-2023-38646
    #   POC: https://github.com/Pumpkin-Garden/POC_Metabase_CVE-2023-38646/blob/main/metabase_poc.sh

    echo "[*] Scan for CloudPanel login page via httpx..."
    httpx -fr -random-agent -u $protocol://$hostname:$port$http_path -mc 200 -mr "(?s)(/assets/images/cloudpanel-cloud.svg|https://www.cloudpanel.io\">cloudpanel.io)"
    # Known to be vulnerable to CVE-2023-35885
    #   POC: https://github.com/datackmy/FallingSkies-CVE-2023-35885

    echo "[*] Scan for Ivanti MobileIron Endpoint Manager via httpx..."
    httpx -fr -random-agent -u $protocol://$hostname:$port$http_path -mc 200 -mr "(?s)(EMSS.css.*LoginIcon.PNG.*ActivateInitialLogin)"
    httpx -fr -random-agent -u $protocol://$hostname:$port$http_path/login.aspx -mc 200 -mr "(?s)(EMSS.css.*LoginIcon.PNG.*ActivateInitialLogin)"
    httpx -fr -random-agent -u $protocol://$hostname:$port$http_path/mifs/user/login.jsp -mc 200 -mr "(?s)(MobileIron User Portal|/mobileiron/img)"
    # Known to be vulnerable to CVE-2023-35078 - Ivanti Endpoint Manager Mobile (EPMM)
    #   POC: https://github.com/vchan-in/CVE-2023-35078-Exploit-POC

    echo "[*] Scanning for open-redirect vulnerability via openredirex/paramix..."
    cd /opt/openredirex
    source venv/bin/activate
    echo "$protocol://$hostname:$port$http_path" | paramix -o -v FUZZ | python3 /opt/openredirex/openredirex.py 
    deactivate
    cd "$cwd"

    echo "[*] Scanning via dirsearch and default wordlist..."
    python3 /opt/dirsearch/dirsearch.py -u $protocol://$hostname:$port$http_path -x 403,404

    echo "[*] Scanning via nikto..."
    if [ "$protocol" == "http" ]; then
        nikto -host $hostname -port $port -C all -nossl
    else
        nikto -host $hostname -port $port -C all -ssl
    fi

    echo "[*] Running nuclei scan using ALL default nuclei templates on $protocol://$hostname:$port$http_path..."
    nuclei -u "$protocol://$hostname:$port$http_path"
}

function scan_smb_service {
    local protocol="$1"
    local hostname="$2"
    local smb_ports="$3"

    echo "[*] Run nbtscan on target: $hostname..."
    nbtscan "$hostname"

    echo "[*] Run nmblookup on target: $hostname..."
    nmblookup -A "$hostname"

    echo "[*] Run enum4linux on target: $hostname..."
    enum4linux -A "$hostname"

    echo "[*] Scan for SMB version via msfconsole on target: $hostname..."
    msfconsole -q -x "use auxiliary/scanner/smb/smb_version; set RHOSTS $hostname; exploit; exit"
    # locate appropriate exploit type in metasploit for version of samba in use
    #   eg trans2open: 2.2.0 - 2.2.8
    #       available exploit EDB: 10 (searchsploit /10.c) or in metasploit
    # samba symlink directory traversal vulnerability
    #   3.0.x - 3.4.x (maybe 3.1.x too, although not documented)
    #       Exploit: 
    #           msfconsole -q -x "use admin/smb/samba_symlink_traversal; set RHOST <victim-ip>; set RPORT 445; set SMBSHARE <open-smb-share>; exploit; exit"
    #       ref: see 'sufferance' in oscp labs
    #       ref: see 'tophat' in oscp-labs

    echo "[*] Run SMB Finger on on target: $hostname..."
    python3 /usr/share/responder/tools/RunFinger.py -i "$hostname"
    # Possible Further avenues to explore based on output:
    #   SMB signing False -> ntlm relay
    #   Bootime still show a date? -> try MS17-010, BlueKeep
    #   SMBv2? -> try MS0-067/MS17-010
    #   NullSession? -> enum
    #   Multiple domains? cool
    #   Windows 2003? -> lol
    

    IFS=$'\n'
    for smb_port in $smb_ports; do 
        echo "[*] Run nmap scripts scan on target: $hostname, port: $smb_port..."
        nmap -v -Pn -sV -T5 -p "$smb_port" --script=smb-server-stats --script=smb-os-discovery \
            --script=smb-protocols --script=smb-ls --script=smb-enum-domains \
            --script=smb-psexec --script=smb-enum-groups --script=smb-enum-processes \
            --script=smb-brute --script=smb-print-text --script=smb-security-mode \
            --script=smb-enum-sessions --script=smb-mbenum --script=smb-enum-users \
            --script=smb-enum-shares --script=smb-system-info --script=smb2-security-mode.nse \
            --script=smb2-vuln-uptime.nse \
            --script=smb-vuln* "$hostname"

        echo "[*] Scan for exposed Samba Linux shares via msfconsole on target: $hostname, port: $smb_port ..."
        msfconsole -q -x "use auxiliary/scanner/smb/smb_enumshares; set RHOSTS $hostname; set RPORT $smb_port; exploit; exit"

        echo "[*] Scan for MS17-010 via msfconsole on target: $hostname, port: $smb_port ..."
        msfconsole -q -x "use auxiliary/scanner/smb/smb_ms17_010; set RHOSTS $hostname; set RPORT $smb_port; exploit; exit"
    done

}

scan_smb_service "smb" "$hostname" "$smb_ports"

IFS=$'\n'
for http_port in $http_ports; do
    scan_http_service "http" "$hostname" "$http_port" "$http_path"    
done

IFS=$'\n'
for https_port in $https_ports; do
    scan_http_service "https" "$hostname" "$https_port" "$http_path"
done


# HTTP Web Scanners
#   TODO via nuclei + nuclei-templates
#       via AllForOne NUclei Templates
#           https://github.com/AggressiveUser/AllForOne
#   TODO via nuclei + nuclei-fuzzing-templates
#       Link: https://github.com/projectdiscovery/fuzzing-templates


# HTTP Open redirect vulnerability
#   via openredirex
#       Replace all instances with FUZZ for opendirect fuzzing check...
#           echo <URL> | python3 /opt/openredirex/openredirex.py 

# HTTP Known Vulnerabilities CVEs
#   TODO Veeam Backup
#       Exploit
#           https://github.com/horizon3ai/CVE-2023-27532

# HTTP Identify CDN 
#   TODO via cdncheck
#       echo "hackerone.com" | cdncheck -resp 
#       https://github.com/projectdiscovery/cdncheck
#   TODO via ipcdn
#       https://github.com/six2dez/ipcdn


#  HTTP Identify the URLs on the site 
#   TODO via hakrawler 
#       https://github.com/hakluke/hakrawler


# HTTP Scanning for behaviours from various headers
#   TODO via headerpwn
#       Link: https://github.com/DevanshBatham/HeaderPwn


# HTTP Scanning for CRLF vulnerability on the website 
#   TODO via crlfuzz
#       Link: https://github.com/dwisiswant0/crlfuzz


# HTTP Bypass WAFs by trying to locate the origin from an IP range, via originfinder
#   prips 1.1.1.0/24 | hakoriginfinder -h www.macquarie.com.au
#   https://github.com/hakluke/hakorigfinder


# TODO HTTP identify CDN/WAF 
#   via findcdn, cdncheck
#       https://github.com/cisagov/findcdn
#       https://github.com/projectdiscovery/cdncheck


# HTTP Blind Injection Attacks Detection
#   via cowitness
#       https://www.trustedsec.com/blog/introducing-cowitness-enhancing-web-application-testing-with-external-service-interaction/?utm_content=254676137&utm_medium=social&utm_source=twitter&hss_channel=tw-403811306
#   via Burpsuite Collaborator
#   via projectdiscovery's interactsh-server/interactsh-client


# HTTP Default credentials detection
#   via DefaultCreds-cheat-sheet
#       cd /opt/DefaultCreds-cheat-sheet
#       source venv/bin/activate
#       creds search <technology>


# HTTP Identify secrets / credentials in Javascript files
#   TODO via jsluice
#       https://github.com/BishopFox/jsluice/tree/main/cmd/jsluice


# HTTP Generate wordlists for bruteforcing paths 
#   via haklistgen
#       https://github.com/hakluke/haklistgen


# HTTP .git directory discovered
#   Exploit
#       copy .git file to a /tmp local directory > git status > git log -v > git checkout <previous-branch> to see previous data
#       https://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/


# HTTP Discover HTTP Paths / URLs
#   via wayback archive
#       TODO via paramspider
#           ```
#           cd /opt/paramspider
#           source venv/bin/activate
#           paramspider -d www.macquarie.com.au
#           deactivate
#           ```
#           Link: https://github.com/devanshbatham/ParamSpider
#   via crawling
#       via xcrawl3r
#           Link: https://github.com/hueristiq/xcrawl3r
#           xcrawl3r --include-subdomains -d jira.devtools.macquarie.com -u https://jira.devtools.macquarie.com
#       TODO via katana
#           Link: https://github.com/projectdiscovery/katana


# HTTP Check password reset tokens if they are predictable for user
#   via burpsuite 
#       Check from URL e.g. md5(UsersEmail + CurrentUnixTimestamp)
#           Taken from: https://twitter.com/Rhynorater/status/1695419201152749920?s=20


# HTTP Intercept traffic for inspection for secrets, interesting files, etc.
#   via burpsuite


# HTTP Check if AWS cognito IDP is in use?
#   if client ID exposed and signup enabled
#       Signup using awscli
#           See `aws.sh` for more details


# HTTP 


# Docker Identify open Docker port, and check how to exploit it
#   TODO via nmap
#       To exploit:
#           https://www.uptycs.com/blog/detecting-docker-container-malware-using-osquery


# SNMP to enumerate SNMP accounts to dump accounts 
#   TODO via snmpwalk
#     snmpwalk -c public -v1 $TARGET 1.3.6.1.4.1.77.1.2.25
# https://twitter.com/Alh4zr3d/status/1653777315267215362?s=20


# RDP Detect if RDP is running
#   TODO via nmap
#           nmap -sS -Pn -sV -p 3389 <host>
#   Exploitation
#       It is possible to enumerate username/password for the RDP port

# RDP Check if valid usernames
#   via xrdp
#       Attempt to connect to the host, and detect whether we identify the previous usernames that have been logged onto


# RDP Check for BlueKeep RCE CVE-2019-0708
#   TODO via Metasploit
#       auxiliary/scanner/rdp/cve_2019_0708_bluekeep
#       Exploit: exploit/windows/rdp/cve_2019_0708_bluekeep_rce

# LDAP Enumerate / Recon LDAP 
#   TODO via nmap
#       nmap -n -sV --script "ldap* and not brute" -p 389 <DC IP>
#       https://book.hacktricks.xyz/windows-hardening/active-directory-methodology


# SMB Check null sessions / Guest services
#   TODO via enum4linux 
#       enum4linux -a -u "" -p "" <DC IP> && enum4linux -a -u "guest" -p "" <DC IP>
#       https://book.hacktricks.xyz/windows-hardening/active-directory-methodology
#   TODO smbmap
#       smbmap -u "" -p "" -P 445 -H <DC IP> && smbmap -u "guest" -p "" -P 445 -H <DC IP>
#       https://book.hacktricks.xyz/windows-hardening/active-directory-methodology
#   TODO smbclient
#       smbclient -U '%' -L //<DC IP> && smbclient -U 'guest%' -L //
#       https://book.hacktricks.xyz/windows-hardening/active-directory-methodology


# SMB Check if SMB Signing is required or not for relaying
#   TODO via nmap
#       sudo nmap -sS -p 139,445 --script=smb-security-mode.nse,smb2-security-mode.nse <host>
#   TODO via smb
#       python3 /usr/share/responder/tools/RunFinger.py -i <IP Range>

